#include<stdio.h>

struct process {
    int pid;
    int arrival, burst, completion, waiting, turnaround;
    int done;   // flag to check if process is completed
};

int main() {
    int n;
    scanf("%d",&n);
    struct process p[n];

    for(int i=0;i<n;i++) {
        p[i].pid=i+1;
        printf("Arrival Time :");
        scanf("%d",&p[i].arrival);
        printf("Burst Time :");
        scanf("%d",&p[i].burst);
        p[i].done=0;   // initially not completed
    }

    int current_time=0, completed=0, totalwt=0, totaltat=0;

    while(completed < n) {
        int idx=-1;
        int min_burst=1e9;

        // find process with shortest burst among arrived & not done
        for(int i=0;i<n;i++) {
            if(p[i].arrival <= current_time && p[i].done==0) {
                if(p[i].burst < min_burst) {
                    min_burst = p[i].burst;
                    idx=i;
                }
            }
        }

        if(idx==-1) {
            // no process has arrived yet
            current_time++;
        } else {
            // execute the chosen process
            p[idx].completion = current_time + p[idx].burst;
            p[idx].turnaround = p[idx].completion - p[idx].arrival;
            p[idx].waiting = p[idx].turnaround - p[idx].burst;

            current_time = p[idx].completion;
            p[idx].done = 1;
            completed++;

            totalwt += p[idx].waiting;
            totaltat += p[idx].turnaround;
        }
    }

    // print results
    printf("\nPID\tAT\tBT\tCT\tTAT\tWT\n");
    for(int i=0;i<n;i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\n",
            p[i].pid, p[i].arrival, p[i].burst,
            p[i].completion, p[i].turnaround, p[i].waiting);
    }

    printf("\nAverage Waiting Time = %.2f", (float)totalwt/n);
    printf("\nAverage Turnaround Time = %.2f\n", (float)totaltat/n);

    return 0;
}
